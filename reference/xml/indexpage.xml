<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="indexpage" kind="page">
    <compoundname>index</compoundname>
    <title>libcester</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><image type="html" name="libcester.png" inline="yes"></image>
</para>
<sect1 id="index_1autotoc_md0">
<title>libcester</title>
<para>A robust header only unit testing framework for C programming language. Support function mocking, memory leak detection, crash report.</para>
<para>cester is a header only automated testing framework for the C programming language, it requires no dependency and can be downloaded and used in a project immediately. Works on various platorms including embedded systems and compatible with various compilers. Allows shared instance <computeroutput>TestInstance</computeroutput> object in which each test cases can use to share data and access the command line arguments.</para>
<para><programlisting filename=".c"><codeline><highlight class="preprocessor">#include<sp/>&lt;<ref refid="cester_8h" kindref="compound">exotic/cester.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="cester_8h_1a4681c51ac1793cf49a7d90fac6eabe74" kindref="member">CESTER_TEST</ref>(test_one,<sp/>inst,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cester_8h_1a46a752bc620dbdfbc4f5f851307b0d72" kindref="member">cester_assert_equal</ref>(NULL,<sp/>((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)0));<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
</programlisting></para>
<para>The test results can be outputed as various format JunitXML, Test Anything Protocol, Test Anything Protocol Version 13 and text. Visit <ulink url="https://exoticlibraries.github.io/libcester/docs/">https://exoticlibraries.github.io/libcester/docs/</ulink> for documentation and tutorials.</para>
<para><hruler/>
</para>
<sect2 id="index_1autotoc_md1">
<title>Table of content</title>
<para><itemizedlist>
<listitem><para><ulink url="#standards-compliance-and-portability">Standards Compliance and Portability</ulink></para>
</listitem><listitem><para><ulink url="#installation">Installation</ulink><itemizedlist>
<listitem><para><ulink url="#install">Install</ulink><itemizedlist>
<listitem><para><ulink url="#windows">Windows</ulink></para>
</listitem><listitem><para><ulink url="#linux">Linux</ulink></para>
</listitem><listitem><para><ulink url="#other-platforms">Other platforms</ulink></para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><ulink url="#documentation">Documentation</ulink></para>
</listitem><listitem><para><ulink url="#usage">Usage</ulink><itemizedlist>
<listitem><para><ulink url="#writing-test">Writing and Running test</ulink></para>
</listitem><listitem><para><ulink url="#cester-options">Cester options</ulink></para>
</listitem><listitem><para><ulink url="#macros">Macros</ulink></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><ulink url="#mocking">Mocking</ulink></para>
</listitem><listitem><para><ulink url="#faq">FAQ</ulink><itemizedlist>
<listitem><para><ulink url="#no-test-case-detected">No test case detected</ulink></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><ulink url="#how-it-works">How it works</ulink></para>
</listitem><listitem><para><ulink url="#contributing">Contributing</ulink></para>
</listitem><listitem><para><ulink url="#references">References</ulink></para>
</listitem><listitem><para><ulink url="#license">License</ulink></para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="index_1autotoc_md2">
<title>Standards Compliance and Portability</title>
<para>The project is compliant with the original C language specification ISO/IEC 9899:1990 and the first POSIX specification IEEE Std 1003.1-1988 which ensures the project compatibility in various environments. It also makes use of features in the newer revisions ISO/IEC 9899:1999 and IEEE Std 1003.1-2001 whenever possible.</para>
<para>Even though the project is designed for C, but also works with C++ as it is compatible with C++98 Standard (ISO/IEC 14882:1998), C++03 Standard (ISO/IEC 14882:2003) and C++11 Standard (ISO/IEC 14882:2011).</para>
<para>The project can be used with any C or C++ compiler. There are optional macros and options that can be used to attain the desired output in the case of undesired results.</para>
</sect2>
<sect2 id="index_1autotoc_md3">
<title>Installation</title>
<para>If you install the library file <computeroutput><ref refid="cester_8h" kindref="compound">cester.h</ref></computeroutput> using any of the commands below, it can be included in your test like <computeroutput>&lt;<ref refid="cester_8h" kindref="compound">exotic/cester.h</ref>&gt;</computeroutput>.</para>
<sect3 id="index_1autotoc_md4">
<title>Windows</title>
<para>Install the library using powershell. It auto detect your insalled C and C++ compilers include directory and install libcester into the include folder. Execute the command in powershell as admin.</para>
<para><programlisting filename=".powershell"><codeline><highlight class="normal">&amp;<sp/>$([scriptblock]::Create((New-Object<sp/>Net.WebClient).DownloadString(&quot;https://exoticlibraries.github.io/magic/install.ps1&quot;)))<sp/>libcester</highlight></codeline>
</programlisting></para>
</sect3>
<sect3 id="index_1autotoc_md5">
<title>Linux</title>
<para>Use the remote installation script to install libcester with bash. If the command is executes with super user priviledge (sudo) it will be installed in the folder /usr/include else it will be installed in the folder /usr/local/include. Or you can specify where to install it using the option <computeroutput>--installfolder=./</computeroutput></para>
<para><programlisting filename=".bash"><codeline><highlight class="normal">bash<sp/>&lt;(curl<sp/>-s<sp/>https://exoticlibraries.github.io/magic/install.sh)<sp/>libcester</highlight></codeline>
</programlisting></para>
</sect3>
<sect3 id="index_1autotoc_md6">
<title>Other platforms</title>
<para>You can simply download the header file <computeroutput><ref refid="cester_8h" kindref="compound">cester.h</ref></computeroutput> from the repo into your project source folder and include it in your project. Download the file from <ulink url="https://github.com/exoticlibraries/libcester/releases">here</ulink>. The you can include it in your test relatively like <computeroutput>#include &quot;cester.h&quot;</computeroutput>.</para>
</sect3>
</sect2>
<sect2 id="index_1autotoc_md7">
<title>Documentation</title>
<para>The <ulink url="https://exoticlibraries.github.io/libcester/docs/">documentation</ulink> provides several examples, tutorials, and detailed guides for using the library. While <ulink url="https://exoticlibraries.github.io/libcester/reference/">reference</ulink> provides a low-level overview of all the implemented APIs in the library.</para>
<para>Some of the documentation pages are listed below:</para>
<para><itemizedlist>
<listitem><para><ulink url="https://exoticlibraries.github.io/libcester/docs/assertions.html">Assertion Macros</ulink></para>
</listitem><listitem><para><ulink url="https://exoticlibraries.github.io/libcester/docs/mocking.html">Mocking</ulink></para>
</listitem><listitem><para><ulink url="https://exoticlibraries.github.io/libcester/docs/macros.html">Helper Macros</ulink></para>
</listitem><listitem><para><ulink url="https://exoticlibraries.github.io/libcester/docs/manual_test_registration.html">Manual Tests Registration</ulink></para>
</listitem><listitem><para><ulink url="https://exoticlibraries.github.io/libcester/docs/options.html">Cester Options</ulink></para>
</listitem><listitem><para><ulink url="https://exoticlibraries.github.io/libcester/docs/output_formats.html">Output Formats</ulink></para>
</listitem><listitem><para><ulink url="https://exoticlibraries.github.io/libcester/docs/test_for_failure.html">Testing for failures</ulink></para>
</listitem><listitem><para><ulink url="https://exoticlibraries.github.io/libcester/how_it_works/index.html">How it works</ulink></para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="index_1autotoc_md8">
<title>Usage</title>
<sect3 id="index_1autotoc_md9">
<title>Writing and Running test</title>
<para>The macro CESTER_TEST is used to create a test case, the first parameter is the test case name the second parameter is the test instance object which is used to share data between the test cases and also has the command line arguments object and count, the last parameter is the body of the test case. The following example defines a test case that chack if <computeroutput>NULL</computeroutput> is the same as <computeroutput>((void*)0)</computeroutput></para>
<para><programlisting filename=".c"><codeline><highlight class="comment">//test.c</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="cester_8h" kindref="compound">exotic/cester.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="cester_8h_1a4681c51ac1793cf49a7d90fac6eabe74" kindref="member">CESTER_TEST</ref>(test_one,<sp/>inst,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cester_8h_1a46a752bc620dbdfbc4f5f851307b0d72" kindref="member">cester_assert_equal</ref>(NULL,<sp/>((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)0));<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="cester_8h_1a4681c51ac1793cf49a7d90fac6eabe74" kindref="member">CESTER_TEST</ref>(test_two,<sp/>inst,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cester_8h_1a4906d3f737b8653a5f79e3f6509433c3" kindref="member">cester_assert_ptr_equal</ref>(inst,<sp/>NULL);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
</programlisting></para>
<para>cester will automatically detect and register the test cases if the macro <computeroutput>__BASE_FILE__</computeroutput> is predefined by the compiler. If no test is detected see the <ulink url="#faq">FAQ</ulink> below on ways to make cester aware of the test case.</para>
<para>The test above can be compiled and run like below. <bold>Do not forget to add the option -I. for gcc so it can find the <computeroutput>__BASE_FILE__</computeroutput></bold>.</para>
<para><programlisting filename=".bash"><codeline><highlight class="normal">gcc<sp/>test.c<sp/>-I.-o<sp/>test</highlight></codeline>
<codeline><highlight class="normal">./test</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>+<sp/>(0.00s)<sp/>test<sp/>one</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>(0.00s)<sp/>test<sp/>two</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">AssertionError<sp/>crash_test.c:10:<sp/>in<sp/>&apos;test_two&apos;<sp/>=&gt;<sp/>expected<sp/>&apos;0761C50&apos;,<sp/>received<sp/>&apos;0000000&apos;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Ran<sp/>2<sp/>test(s)<sp/>in<sp/>0.01<sp/>Seconds</highlight></codeline>
<codeline><highlight class="normal">Synthesis:<sp/>FAILURE<sp/>Tests:<sp/>2<sp/>|<sp/>Passing:<sp/>1<sp/>|<sp/>Failing:<sp/>1</highlight></codeline>
</programlisting></para>
</sect3>
<sect3 id="index_1autotoc_md10">
<title>Macros</title>
<para>Many predefined helper macros are present in cester, all cester macros begins with CESTER_ and cester_. The detail documentation of the macros is at <ulink url="https://exoticlibraries.github.io/libcester/docs/macros.html">Helper Macros</ulink>.</para>
</sect3>
</sect2>
<sect2 id="index_1autotoc_md11">
<title>Mocking</title>
<para>cester supports mocking function. The mock feature currently works on GCC compiler because of the use of the <computeroutput>--wrap</computeroutput> option which is not supported on MAC OSX and might not be available in other compilers. The two macros <ulink url="https://exoticlibraries.github.io/libcester/docs/macros.html#cester-mock-simple-function">CESTER_MOCK_SIMPLE_FUNCTION</ulink> and <ulink url="https://exoticlibraries.github.io/libcester/docs/macros.html#cester-mock-function">CESTER_MOCK_FUNCTION</ulink> are used for function mocking.</para>
<para>The following test mocks a funtion that accept no parameter and return a value:</para>
<para><emphasis>originals.c</emphasis></para>
<para><programlisting filename=".c"><codeline><highlight class="preprocessor">#ifndef<sp/>ORIGINALS</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ORIGINALS</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>multiply_by()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>multiply_a_number(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>*<sp/>multiply_by()<sp/>;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
</programlisting></para>
<para><emphasis>test_mock.c</emphasis></para>
<para><programlisting filename=".c"><codeline><highlight class="preprocessor">#include<sp/>&lt;<ref refid="cester_8h" kindref="compound">exotic/cester.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;originals.c&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="cester_8h_1a8a6a76440950a47f00c288af35260b8f" kindref="member">CESTER_MOCK_FUNCTION</ref>(multiply_by(),<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>5;</highlight></codeline>
<codeline><highlight class="normal">})</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="cester_8h_1a4681c51ac1793cf49a7d90fac6eabe74" kindref="member">CESTER_TEST</ref>(check_mocked_function,<sp/><ref refid="structtest__instance" kindref="compound">test_instance</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cester_8h_1a46a752bc620dbdfbc4f5f851307b0d72" kindref="member">cester_assert_equal</ref>(multiply_a_number(2),<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
</programlisting></para>
<para>Compile the test file <emphasis>test_mock.c</emphasis> with the <ndash/>wrap option e.g. in the example above the function <computeroutput>multiply_by</computeroutput> was mocked so the option <emphasis>-Wl,<ndash/>wrap=multiply_by</emphasis> is supplied during compilation.</para>
<para><programlisting filename=".bash"><codeline><highlight class="normal">gcc<sp/>test_mock.c<sp/>-I.<sp/>-Wl,--wrap=multiply_by<sp/>-o<sp/>test_mock</highlight></codeline>
<codeline><highlight class="normal">./test_mock</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">+<sp/>(0.00s)<sp/>check<sp/>mocked<sp/>function</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Ran<sp/>1<sp/>test(s)<sp/>in<sp/>0.00<sp/>Seconds</highlight></codeline>
<codeline><highlight class="normal">Synthesis:<sp/>SUCCESS<sp/>Tests:<sp/>1<sp/>|<sp/>Passing:<sp/>1<sp/>|<sp/>Failing:<sp/>0</highlight></codeline>
</programlisting></para>
<para>More detailed explanation on mocking function can be seen at <ulink url="https://exoticlibraries.github.io/libcester/docs/mocking.html">https://exoticlibraries.github.io/libcester/docs/mocking.html</ulink>.</para>
<sect3 id="index_1autotoc_md12">
<title>Cester options</title>
<para>cester accepts various options to tune it functionalities. Any command line parameter that starts with <ndash/>cester- is treated as cester option otherwise it is ignored. All the available options can be viewed <ulink url="https://exoticlibraries.github.io/libcester/docs/options.html">here</ulink>.</para>
<para>The following options performs important task:</para>
<para><itemizedlist>
<listitem><para><bold><ndash/>cester-noisolation</bold>: instruct cester to run all the test in one single process. With this option signal will be used for crash reporting but if the test is compiled with the macro <computeroutput>CESTER_NO_SIGNAL</computeroutput> defined, cester will not be able to recover from critical crash therefore if a test case segfault the tests will terminate immediately.<itemizedlist>
<listitem><para><bold><ndash/>cester-output</bold>: Change the format in which the outpout is generated. Various format is supported, all the supported format can be viewed <ulink url="https://exoticlibraries.github.io/libcester/docs/output_formats.html">here</ulink>. E.g. to print the output in JunitXML format you supply the option <computeroutput>--cester-output=junitxml</computeroutput>.</para>
</listitem><listitem><para><bold><ndash/>cester-nomemtest</bold>: instruct cester to skip memory leak detection and test. Alternatively the test can be compiled with the macro <computeroutput>CESTER_NO_MEM_TEST</computeroutput> defined at the beginning of the source file.</para>
</listitem><listitem><para><bold><ndash/>cester-verbose</bold>: printf as much output as possible including passed test expression, output to the stdout from within the test case. This option combined with <bold><ndash/>cester-minimal</bold> prints out the output in a very sane format.</para>
</listitem><listitem><para><bold><ndash/>cester-help</bold>: to view all the options accepted by cester.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</sect3>
</sect2>
<sect2 id="index_1autotoc_md13">
<title>FAQ</title>
<sect3 id="index_1autotoc_md14">
<title>No test detected</title>
<para>If no test was ran or your test cases were not detected, in most cases it because your compiler did not define the <computeroutput>__BASE_FILE__</computeroutput> macro. If you are using the Visual studio IDE you should define the macro in <computeroutput>Properties -&gt; C/C++ -&gt; Preprocessor -&gt; Preprocessor Definition</computeroutput> as <computeroutput>__BASE_FILE__=&quot;%(Filename)%(Extension)&quot;</computeroutput>. Or you can add the macro at compile time as option to your compiler using the macro option. e.g. in gcc</para>
<para><programlisting filename=".bash"><codeline><highlight class="normal">gcc<sp/>-D__BASE_FILE__=\&quot;/the/path/to/yout/testfile.c\&quot;<sp/>testfile.c<sp/>-I.</highlight></codeline>
</programlisting></para>
<para>You can also define the <computeroutput>__BASE_FILE__</computeroutput> at the beginning of your test file with the absolute path to the test file. E.g for the test file test.c:</para>
<para><programlisting filename=".c"><codeline><highlight class="preprocessor">#define<sp/>__BASE_FILE__<sp/>&quot;/path/to/test.c&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="cester_8h" kindref="compound">exotic/cester.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="cester_8h_1a4681c51ac1793cf49a7d90fac6eabe74" kindref="member">CESTER_TEST</ref>(test1,<sp/><ref refid="structtest__instance" kindref="compound">test_instance</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cester_8h_1a46a752bc620dbdfbc4f5f851307b0d72" kindref="member">cester_assert_equal</ref>(NULL,<sp/>NULL);</highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
</programlisting></para>
<para>Alternatively the test cases should be manually registered in the main method, you will have to disable cester main function by defining the macro CESTER_NO_MAIN.</para>
<para><programlisting filename=".c"><codeline><highlight class="preprocessor">#define<sp/>CESTER_NO_MAIN</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="cester_8h" kindref="compound">exotic/cester.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="cester_8h_1a4681c51ac1793cf49a7d90fac6eabe74" kindref="member">CESTER_TEST</ref>(test1,<sp/><ref refid="structtest__instance" kindref="compound">test_instance</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cester_8h_1a46a752bc620dbdfbc4f5f851307b0d72" kindref="member">cester_assert_equal</ref>(NULL,<sp/>NULL);</highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="cester_8h_1af6fdfc1a7963f6b2bf1196a5d75ceeec" kindref="member">CESTER_BODY</ref>(</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="cester_8h_1a3c04138a5bfe5d72780bb7e82a18e627" kindref="member">main</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>argv)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cester_8h_1a5d12fa79c77dfe56918e813950e1b96e" kindref="member">CESTER_REGISTER_TEST</ref>(test1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="cester_8h_1ae1c1f1eb8354492276bdbf70d8875f92" kindref="member">CESTER_RUN_ALL_TESTS</ref>(argc,<sp/>argv);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
</programlisting></para>
<para>Visit this <ulink url="https://exoticlibraries.github.io/libcester/docs/manual_test_registration.html">link</ulink> for more detail on manual test registration.</para>
</sect3>
</sect2>
<sect2 id="index_1autotoc_md15">
<title>How it works</title>
<para>The base file which is the file that contains the tests is included more than twice during the macro expansion process to define and register the test cases. The working principle is best explained by a thought experiment.</para>
<para><blockquote><para>Imagine a source file including a header file. Then imagine the header file including the source file that included it. Now imagine doing that three times in a row within the same header file. Proceed to imagine redefining all of the identifiers each time. Finally imagine doing all of that with preprocessor directives. What you ended up with is CHEAT - Sampsa Kiiskinen </para>
</blockquote></para>
<para>The project uses the same approach used by the <ulink url="https://github.com/Tuplanolla/cheat">cheat</ulink> project. It makes a very tricky use of the C preprocessor directive to achieve test cases registration so the developer can concentrate on writing the test only while cester manages the test registration, execution and analysis.</para>
<para>See the pages at <ulink url="https://exoticlibraries.github.io/libcester/how_it_works/index.html">how it works</ulink> for more explanation.</para>
</sect2>
<sect2 id="index_1autotoc_md16">
<title>Contributing</title>
<para>If you have any issue or you want to request a feature you can open a request <ulink url="https://github.com/exoticlibraries/libcester/issues/new/choose">here</ulink> anytime and if you made some changes that should be added to the main project send in a <ulink url="https://github.com/exoticlibraries/libcester/compare">pull request</ulink>.</para>
</sect2>
<sect2 id="index_1autotoc_md17">
<title>References</title>
<para><itemizedlist>
<listitem><para><ulink url="https://en.wikipedia.org/wiki/ANSI_C">ANSI C</ulink></para>
</listitem><listitem><para><ulink url="https://github.com/Tuplanolla/cheat">CHEAT</ulink></para>
</listitem><listitem><para><ulink url="https://exoticlibraries.github.io/">Exotic Libraries</ulink></para>
</listitem><listitem><para><ulink url="https://thecarisma.github.io/">Author</ulink></para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="index_1autotoc_md18">
<title>License</title>
<para>MIT License Copyright (c) 2020, Adewale Azeez </para>
</sect2>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
